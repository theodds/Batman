setwd("~/Dropbox/Portable/Github/Packages/Batman")
library(Batman)
library(dbarts)
library(zeallot)
library(Matrix)
P <- 10
N <- 250
sigma <- 20
num_tree <- 50
sim_fried_pois <- function(n,p,sigma) {
f <- function(x)
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3]-0.5)^2 + 10 * x[,4] + 5 * x[,5]
X <- matrix(runif(n*p), nrow = n)
lambda <- sigma * f(X)
Y <- rpois(n = n, lambda = lambda)
return(list(X = X, Y = Y, lambda = lambda))
}
c(X,Y,lambda) %<-% sim_fried_pois(N,P,sigma)
probs <- diag(P); probs <- Matrix(probs, sparse = TRUE)
system.time({
out <- PoisBart(X, Y, probs, num_tree, scale_lambda = 1,
scale_lambda_0 = 1 / sqrt(num_tree),
num_burn = 1000, num_thin = 1, num_save = 1000)
})
plot(log(lambda), colMeans(out$lambda))
names(out)
out$lambda
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(survival)
library(Batman)
# Load and format data ----------------------------------------------------
data(veteran)
head(veteran)
Y     <- veteran$time
{
veteran_X <- cbind(veteran$trt, veteran$karno, veteran$diagtime,
veteran$age, veteran$prior)
veteran_X[,1] <- veteran_X[,1] - 1
veteran_X[,2] <- veteran_X[,2] / 100
veteran_X[,3] <- veteran_X[,3] / 90
veteran_X[,4] <- (veteran_X[,4] - 34) / (81 - 34)
veteran_X[,5] <- veteran_X[,5] / 10
}
delta <- veteran$status
o     <- order(Y) - 1
gaps  <- o - 1
probs <- Matrix::Matrix(diag(5), sparse = TRUE)
num_trees <- 30
scale_lambda <- 1 / sqrt(num_trees)
num_burn <- 4000
num_thin <- 1
num_save <- 4000
# Process survival data ---------------------------------------------------
process_surv <- function(Y, delta, X)
{
o     <- order(Y, 1-delta)
Y     <- Y[o]
delta <- delta[o]
X     <- X[o,]
survs <- Surv(Y, delta)
k <- 1
U <- numeric(length(unique(survs)))
L <- numeric(length(unique(survs)))
L[1] <- 1
for(i in 2:length(survs))
{
if(!identical(survs[i], survs[i-1])) {
U[k] <- i - 1
k <- k + 1
L[k] <- i
}
}
U[length(unique(survs))] <- length(survs)
return(list(o = 1:length(Y) - 1, Y = Y, L = L-1, U = U-1, delta = delta, X = X))
}
proc_dat <- process_surv(Y, delta, veteran_X)
set.seed(816740391)
fit_coxbart <- CoxBart(proc_dat$X,
proc_dat$Y,
proc_dat$delta,
proc_dat$o,
proc_dat$L,
proc_dat$U,
probs,
num_trees, scale_lambda, num_burn, num_thin, num_save)
fit_coxbart <- CoxBart(proc_dat$X,
proc_dat$Y,
proc_dat$delta,
proc_dat$o,
proc_dat$L,
proc_dat$U,
probs,
proc_data$X,
num_trees, scale_lambda, num_burn, num_thin, num_save)
fit_coxbart <- CoxBart(proc_dat$X,
proc_dat$Y,
proc_dat$delta,
proc_dat$o,
proc_dat$L,
proc_dat$U,
probs,
proc_dat$X,
num_trees, scale_lambda, num_burn, num_thin, num_save)
print(L)
length(proc_dat$L)
length(proc_dat$U)
library(Batman)
seq_along(3)
seq_len(3)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
system.time({
out_pos <- PoisBart(X, Y, X_test = X, probs = probs, num_trees = num_tree, scale_lambda = 1,
scale_lambda_0 = 1 / sqrt(num_tree),
num_burn = 1000, num_thin = 1, num_save = 1000)
})
plot(log(lambda), colMeans(out_pos$lambda))
rmse(log(lambda), colMeans(out_pos$lambda))
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
rmse(log(lambda), colMeans(out$lambda))
abline(a=0,b=1)
plot(log(lambda), colMeans(out_pos$lambda))
rmse(log(lambda), colMeans(out_pos$lambda))
plot(log(lambda), colMeans(out$lambda))
rmse(log(lambda), colMeans(out$lambda))
abline(a=0,b=1)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
apply(sd, 2, out_pos$lambda)
apply(out_pos$lambda, MARGIN = 2, FUN = sd)
apply(out_pos$lambda, MARGIN = 2, FUN = sd) / apply(out$lambda, 2, sd)
hist(apply(out_pos$lambda, MARGIN = 2, FUN = sd) / apply(out$lambda, 2, sd))
out$phi
hist(out$phi)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
hist(out$phi)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
mean((Y - colMeans(exp(out$lambda)))^2 / colMeans(exp(out$lambda)))
mean((Y - exp(lambda))^2 / exp(lambda))
mean((Y - (lambda))^2 / (lambda))
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
apply(out$lambda, MARGIN = 2, sd) / apply(out_pos$lambda, MARGIN = 2, FUN = sd) %>% hist()
library(tidyverse)
apply(out$lambda, MARGIN = 2, sd) / apply(out_pos$lambda, MARGIN = 2, FUN = sd) %>% hist()
(apply(out$lambda, MARGIN = 2, sd) / apply(out_pos$lambda, MARGIN = 2, FUN = sd)) %>% hist()
sqrt(5)
plot(out$phi)
mean(out$phi)
phihat <- function(x) mean((Y - colMeans(exp(x$lambda)))^2 / colMeans(exp(x$lambda)))
phihat(out)
phihat(out_pos)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/testing_qpois.R", echo=TRUE)
plot(log(lambda), colMeans(out$lambda))
plot(log(lambda), colMeans(out_pos$lambda))
plot(log(lambda), colMeans(out$lambda))
library(Batman)
library(Batman)
library(Batman)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvarforest.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_betareg.R", echo=TRUE)
plot(mu, Y)
plot(density(Y))
plot(\(x) dbeta(x, rho * mu[1], rho * (1 - mu[1])))
mu[1]
rho
(1 - mu[1])
(1 - mu[1]) * rho
library(Batman)
library(tidyverse)
library(zeallot)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
plot(sigma_hat)
plot(pred_outr)
plot(pred_outr$smean)
plot(log(pred_outr$smean))
plot(log(sigma_hat))
names(out)
plot(rowSUms(out$counts))
plot(rowSums(out$counts))
plot(out$counts[,1])
plot(out$tau[,1])
plot(out$tau[,2])
plot(out$tau[,3])
plot(out$tau[,1] / out$tau[,2])
plot(out$tau[,1] / out$tau[,3])
plot(out$tau[,1] / out$tau[,5])
plot(out$tau[,1] / out$tau[,6])
plot(colMeans(out$tau))
plot(colMeans(log(out$tau)))
colMeans(out$counts)
out$counts
dim(out$counts)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
par(mfrow = c(1,2))
plot(X[,1], sigma)
points(X[,1], sigma_hat, col = 'green', pch = 2)
points(X[,1], pred_outr$smean, col = 'blue')
plot(out$scale_lambda, type = 'l')
mean(abs(log(sigma_hat) - log(sigma))^2)
mean(abs(log(pred_outr$smean) - log(sigma))^2)
plot(log(sigma_hat))
plot(sort(log(sigma_hat)))
plot(sort(log(pred_outr$smean)))
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
library(Batman)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
out$counts
head(out$counts)
source("~/Dropbox/Portable/Github/Packages/Batman/inst/scripts/testing_rvar.R", echo=TRUE)
library(Batman)
